"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Created by Lucas Teske on 30/04/17.
 */

// Some auxiliary functions

String.prototype.GetByteAt = function (index) {
  return this.charCodeAt(index) & 0xFF;
};

String.prototype.AsUint8ArrayBuffer = function () {
  var buf = new ArrayBuffer(this.length);
  var bufView = new Uint8Array(buf);
  for (var i = 0, strLen = this.length; i < strLen; i++) {
    bufView[i] = this.charCodeAt(i) & 0xFF;
  }
  return buf;
};

if (!ArrayBuffer.prototype.slice) {
  ArrayBuffer.prototype.slice = function (start, end) {
    var arr = new ArrayBuffer(end - start);
    var uchar = new Uint8Array(this);
    var uchar2 = new Uint8Array(arr);
    var c = 0;
    for (var i = start; i < end; i++) {
      uchar2[c] = uchar[i];
      c++;
    }
    return arr;
  };
}

var Struct = function () {
  function Struct() {
    _classCallCheck(this, Struct);
  }

  _createClass(Struct, null, [{
    key: "unpack",


    //
    // Methods
    //

    //
    // Constants
    //

    value: function unpack(mode, string) {
      var retval = [],
          strpos = 0,
          modepos = 0,
          modelen = mode.length,
          endianess = void 0;

      if (!(string instanceof DataView) && !(string instanceof ArrayBuffer)) {
        Struct.notice('From Struct.js version 0.2, its recomended to use DataView or ArrayBuffer as input. Converting String to Dataview');
        string = new DataView(string.AsUint8ArrayBuffer());
      } else if (string instanceof ArrayBuffer) string = new DataView(string);

      if (modelen === 0) {
        Struct.error("Invalid mode");
        return undefined;
      }
      switch (mode[0]) {
        case ">":
        case "!":
          endianess = Struct.BigEndian;modepos += 1;break;

        case "@":
        case "=":
          Struct.notice("Assuming native = littleendian");modepos += 1;endianess = Struct.LittleEndian;break;
        default:
          endianess = Struct.LittleEndian;
      }
      var data = [undefined, 0];
      while (modepos < modelen) {
        switch (mode[modepos]) {
          case "c":
            data[0] = String.fromCharCode(string.getUint8(strpos));data[1] = 1;break;
          case "b":
            data = Struct._unpackChar(string, endianess, strpos, true);break;
          case "B":
            data = Struct._unpackChar(string, endianess, strpos, false);break;
          case "?":
            data = Struct._unpackBool(string, endianess, strpos);break;
          case "h":
            data = Struct._unpackShort(string, endianess, strpos, true);break;
          case "H":
            data = Struct._unpackShort(string, endianess, strpos, false);break;
          case "i":
            data = Struct._unpackInt(string, endianess, strpos, true);break;
          case "I":
            data = Struct._unpackInt(string, endianess, strpos, false);break;
          case "l":
            data = Struct._unpackInt(string, endianess, strpos, true);break;
          case "L":
            data = Struct._unpackInt(string, endianess, strpos, false);break;
          case "q":
            data = Struct._unpackLonglong(string, endianess, strpos, true);break;
          case "Q":
            data = Struct._unpackLonglong(string, endianess, strpos, false);break;
          case "f":
            data = Struct._unpackFloat(string, endianess, strpos);break;
          case "d":
            data = Struct._unpackDouble(string, endianess, strpos);break;
          case "s":
          case "p":
            data = Struct._unpackString(string, strpos);break;
          case "P":
            data = Struct._unpackInt(string, endianess, strpos, false);break;
          case "x":
            data = [undefined, 1];break;
          default:
            Struct.error("Invalid char at " + modepos + " : \"" + mode[modepos] + "\"");retval = undefined;break;
        }
        if (data[0] !== undefined) retval.push(data[0]);
        strpos += data[1];
        modepos += 1;
      }

      return retval;
    }
  }, {
    key: "_unpackString",


    /*  Unpack String   */
    value: function _unpackString(string, start) {
      var outstring = "",
          i = start;
      while (true) {
        if (string.getUint8(i) === 0) {
          break;
        }
        outstring += String.fromCharCode(string.getUint8(i));
        ++i;
      }
      return outstring;
    }
  }, {
    key: "_unpackDouble",


    /*  Unpack Double   */
    value: function _unpackDouble(string, endianess, start) {
      return [string.getFloat64(start, endianess === Struct.LittleEndian), 8];
    }
  }, {
    key: "_unpackFloat",


    /*  Unpack float */
    value: function _unpackFloat(string, endianess, start) {
      return [string.getFloat32(start, endianess === Struct.LittleEndian), 4];
    }
  }, {
    key: "_unpackLonglong",


    /*  Unpack Signed/Unsigned Long Long    */
    value: function _unpackLonglong(string, endianess, start, signed) {
      //TODO: Port to DataView
      var retval = endianess === Struct.LittleEndian ? string.GetByteAt(7 + start) * Struct.b56 + string.GetByteAt(6 + start) * Struct.b48 + string.GetByteAt(5 + start) * Struct.b40 + string.GetByteAt(4 + start) * Struct.b32 + string.GetByteAt(3 + start) * Struct.b24 + string.GetByteAt(2 + start) * Struct.b16 + string.GetByteAt(1 + start) * Struct.b8 + string.GetByteAt(0 + start) : string.GetByteAt(0 + start) * Struct.b56 + string.GetByteAt(1 + start) * Struct.b48 + string.GetByteAt(2 + start) * Struct.b40 + string.GetByteAt(3 + start) * Struct.b32 + string.GetByteAt(4 + start) * Struct.b24 + string.GetByteAt(5 + start) * Struct.b16 + string.GetByteAt(6 + start) * Struct.b8 + string.GetByteAt(7 + start);
      retval = signed & retval > 0x7FFFFFFFFFFFFFFF ? -(0xFFFFFFFFFFFFFFFF - retval + 1) : retval;
      return [retval, 8];
    }
  }, {
    key: "_unpackInt",
    value: function _unpackInt(string, endianess, start, signed) {
      return [signed ? string.getInt32(start, endianess === Struct.LittleEndian) : string.getUint32(start, endianess === Struct.LittleEndian), 4];
    }
  }, {
    key: "_unpackShort",


    /*  Unpack signed/unsigned short */
    value: function _unpackShort(string, endianess, start, signed) {
      return [signed ? string.getInt16(start, endianess === Struct.LittleEndian) : string.getUint16(start, endianess === Struct.LittleEndian), 2];
    }
  }, {
    key: "_unpackChar",


    /*  Unpack signed/unsigned char as int  */
    value: function _unpackChar(string, _, start, signed) {
      return [signed ? string.getInt8(start) : string.getUint8(start), 1];
    }
  }, {
    key: "_unpackBool",


    /*  Unpack boolean  */
    value: function _unpackBool(string, _, start) {
      return [string.getUint8(start) > 0, 1];
    }
  }, {
    key: "error",
    value: function error(msg) {
      if (Struct.showErrors) {
        console.error("Struct: " + msg);
      }
    }
  }, {
    key: "notice",
    value: function notice(msg) {
      if (Struct.showNotice) {
        console.log("Struct: " + msg);
      }
    }
  }]);

  return Struct;
}();

Struct.VERSION = 0.9;
Struct.showErrors = true;
Struct.showNotice = true;
Struct.b56 = Math.pow(2, 56);
Struct.b48 = Math.pow(2, 48);
Struct.b40 = Math.pow(2, 40);
Struct.b32 = Math.pow(2, 32);
Struct.b24 = Math.pow(2, 24);
Struct.b16 = Math.pow(2, 16);
Struct.b8 = Math.pow(2, 8);
Struct.b4 = Math.pow(2, 4);
Struct.b = {};
Struct.LittleEndian = 0;
Struct.BigEndian = 1;

Struct.String2ArrayBuffer = function (str) {
  var buf = new ArrayBuffer(str.length);
  var bufView = new Uint8Array(buf);
  for (var i = 0, strLen = str.length; i < strLen; i++) {
    bufView[i] = str.charCodeAt(i) & 0xFF;
  }
  return buf;
};

exports.default = Struct;
;

for (var i = 0; i < 64; i++) {
  Struct.b[i] = Math.pow(2, i);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJ1Y3QuanMiXSwibmFtZXMiOlsiU3RyaW5nIiwicHJvdG90eXBlIiwiR2V0Qnl0ZUF0IiwiaW5kZXgiLCJjaGFyQ29kZUF0IiwiQXNVaW50OEFycmF5QnVmZmVyIiwiYnVmIiwiQXJyYXlCdWZmZXIiLCJsZW5ndGgiLCJidWZWaWV3IiwiVWludDhBcnJheSIsImkiLCJzdHJMZW4iLCJzbGljZSIsInN0YXJ0IiwiZW5kIiwiYXJyIiwidWNoYXIiLCJ1Y2hhcjIiLCJjIiwiU3RydWN0IiwibW9kZSIsInN0cmluZyIsInJldHZhbCIsInN0cnBvcyIsIm1vZGVwb3MiLCJtb2RlbGVuIiwiZW5kaWFuZXNzIiwiRGF0YVZpZXciLCJub3RpY2UiLCJlcnJvciIsInVuZGVmaW5lZCIsIkJpZ0VuZGlhbiIsIkxpdHRsZUVuZGlhbiIsImRhdGEiLCJmcm9tQ2hhckNvZGUiLCJnZXRVaW50OCIsIl91bnBhY2tDaGFyIiwiX3VucGFja0Jvb2wiLCJfdW5wYWNrU2hvcnQiLCJfdW5wYWNrSW50IiwiX3VucGFja0xvbmdsb25nIiwiX3VucGFja0Zsb2F0IiwiX3VucGFja0RvdWJsZSIsIl91bnBhY2tTdHJpbmciLCJwdXNoIiwib3V0c3RyaW5nIiwiZ2V0RmxvYXQ2NCIsImdldEZsb2F0MzIiLCJzaWduZWQiLCJiNTYiLCJiNDgiLCJiNDAiLCJiMzIiLCJiMjQiLCJiMTYiLCJiOCIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJfIiwiZ2V0SW50OCIsIm1zZyIsInNob3dFcnJvcnMiLCJjb25zb2xlIiwic2hvd05vdGljZSIsImxvZyIsIlZFUlNJT04iLCJNYXRoIiwicG93IiwiYjQiLCJiIiwiU3RyaW5nMkFycmF5QnVmZmVyIiwic3RyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7QUFJQTs7QUFFQUEsT0FBT0MsU0FBUCxDQUFpQkMsU0FBakIsR0FBNkIsVUFBU0MsS0FBVCxFQUFtQjtBQUM5QyxTQUFRLEtBQUtDLFVBQUwsQ0FBZ0JELEtBQWhCLElBQXlCLElBQWpDO0FBQ0QsQ0FGRDs7QUFJQUgsT0FBT0MsU0FBUCxDQUFpQkksa0JBQWpCLEdBQXNDLFlBQVk7QUFDaEQsTUFBTUMsTUFBTSxJQUFJQyxXQUFKLENBQWdCLEtBQUtDLE1BQXJCLENBQVo7QUFDQSxNQUFNQyxVQUFVLElBQUlDLFVBQUosQ0FBZUosR0FBZixDQUFoQjtBQUNBLE9BQUssSUFBSUssSUFBRSxDQUFOLEVBQVNDLFNBQU8sS0FBS0osTUFBMUIsRUFBa0NHLElBQUVDLE1BQXBDLEVBQTRDRCxHQUE1QyxFQUFpRDtBQUMvQ0YsWUFBUUUsQ0FBUixJQUFhLEtBQUtQLFVBQUwsQ0FBZ0JPLENBQWhCLElBQXFCLElBQWxDO0FBQ0Q7QUFDRCxTQUFPTCxHQUFQO0FBQ0QsQ0FQRDs7QUFTQSxJQUFHLENBQUNDLFlBQVlOLFNBQVosQ0FBc0JZLEtBQTFCLEVBQWlDO0FBQy9CTixjQUFZTixTQUFaLENBQXNCWSxLQUF0QixHQUE4QixVQUFTQyxLQUFULEVBQWVDLEdBQWYsRUFBc0I7QUFDbEQsUUFBTUMsTUFBTSxJQUFJVCxXQUFKLENBQWdCUSxNQUFJRCxLQUFwQixDQUFaO0FBQ0EsUUFBTUcsUUFBUSxJQUFJUCxVQUFKLENBQWUsSUFBZixDQUFkO0FBQ0EsUUFBTVEsU0FBUyxJQUFJUixVQUFKLENBQWVNLEdBQWYsQ0FBZjtBQUNBLFFBQUlHLElBQUksQ0FBUjtBQUNBLFNBQUksSUFBSVIsSUFBRUcsS0FBVixFQUFnQkgsSUFBRUksR0FBbEIsRUFBc0JKLEdBQXRCLEVBQTRCO0FBQzFCTyxhQUFPQyxDQUFQLElBQVlGLE1BQU1OLENBQU4sQ0FBWjtBQUNBUTtBQUNEO0FBQ0QsV0FBT0gsR0FBUDtBQUNELEdBVkQ7QUFXRDs7SUFFb0JJLE07Ozs7Ozs7OztBQXdCbkI7QUFDQTtBQUNBOztBQXhCQTtBQUNBO0FBQ0E7OzJCQXdCY0MsSSxFQUFNQyxNLEVBQVE7QUFDMUIsVUFBSUMsU0FBUyxFQUFiO0FBQUEsVUFDRUMsU0FBUyxDQURYO0FBQUEsVUFFRUMsVUFBVSxDQUZaO0FBQUEsVUFHRUMsVUFBVUwsS0FBS2IsTUFIakI7QUFBQSxVQUlFbUIsa0JBSkY7O0FBTUEsVUFBRyxFQUFFTCxrQkFBa0JNLFFBQXBCLEtBQWlDLEVBQUVOLGtCQUFrQmYsV0FBcEIsQ0FBcEMsRUFBeUU7QUFDdkVhLGVBQU9TLE1BQVAsQ0FBYyxtSEFBZDtBQUNBUCxpQkFBUyxJQUFJTSxRQUFKLENBQWFOLE9BQU9qQixrQkFBUCxFQUFiLENBQVQ7QUFDRCxPQUhELE1BR00sSUFBR2lCLGtCQUFrQmYsV0FBckIsRUFDSmUsU0FBUyxJQUFJTSxRQUFKLENBQWFOLE1BQWIsQ0FBVDs7QUFFRixVQUFHSSxZQUFZLENBQWYsRUFBb0I7QUFDbEJOLGVBQU9VLEtBQVAsQ0FBYSxjQUFiO0FBQ0EsZUFBT0MsU0FBUDtBQUNEO0FBQ0QsY0FBT1YsS0FBSyxDQUFMLENBQVA7QUFDRSxhQUFLLEdBQUw7QUFDQSxhQUFLLEdBQUw7QUFBWU0sc0JBQVlQLE9BQU9ZLFNBQW5CLENBQThCUCxXQUFXLENBQVgsQ0FBYzs7QUFFeEQsYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQVlMLGlCQUFPUyxNQUFQLENBQWMsZ0NBQWQsRUFBaURKLFdBQVcsQ0FBWCxDQUFjRSxZQUFZUCxPQUFPYSxZQUFuQixDQUFpQztBQUM1RztBQUFZTixzQkFBWVAsT0FBT2EsWUFBbkI7QUFOZDtBQVFBLFVBQUlDLE9BQU8sQ0FBQ0gsU0FBRCxFQUFXLENBQVgsQ0FBWDtBQUNBLGFBQU1OLFVBQVVDLE9BQWhCLEVBQXlCO0FBQ3ZCLGdCQUFPTCxLQUFLSSxPQUFMLENBQVA7QUFDRSxlQUFLLEdBQUw7QUFBVVMsaUJBQUssQ0FBTCxJQUFVbEMsT0FBT21DLFlBQVAsQ0FBb0JiLE9BQU9jLFFBQVAsQ0FBZ0JaLE1BQWhCLENBQXBCLENBQVYsQ0FBd0RVLEtBQUssQ0FBTCxJQUFVLENBQVYsQ0FBYTtBQUMvRSxlQUFLLEdBQUw7QUFBVUEsbUJBQU9kLE9BQU9pQixXQUFQLENBQW1CZixNQUFuQixFQUEyQkssU0FBM0IsRUFBc0NILE1BQXRDLEVBQThDLElBQTlDLENBQVAsQ0FBNEQ7QUFDdEUsZUFBSyxHQUFMO0FBQVVVLG1CQUFPZCxPQUFPaUIsV0FBUCxDQUFtQmYsTUFBbkIsRUFBMkJLLFNBQTNCLEVBQXNDSCxNQUF0QyxFQUE4QyxLQUE5QyxDQUFQLENBQTZEO0FBQ3ZFLGVBQUssR0FBTDtBQUFVVSxtQkFBT2QsT0FBT2tCLFdBQVAsQ0FBbUJoQixNQUFuQixFQUEyQkssU0FBM0IsRUFBc0NILE1BQXRDLENBQVAsQ0FBc0Q7QUFDaEUsZUFBSyxHQUFMO0FBQVVVLG1CQUFPZCxPQUFPbUIsWUFBUCxDQUFvQmpCLE1BQXBCLEVBQTJCSyxTQUEzQixFQUFzQ0gsTUFBdEMsRUFBOEMsSUFBOUMsQ0FBUCxDQUE0RDtBQUN0RSxlQUFLLEdBQUw7QUFBVVUsbUJBQU9kLE9BQU9tQixZQUFQLENBQW9CakIsTUFBcEIsRUFBMkJLLFNBQTNCLEVBQXNDSCxNQUF0QyxFQUE4QyxLQUE5QyxDQUFQLENBQTZEO0FBQ3ZFLGVBQUssR0FBTDtBQUFVVSxtQkFBT2QsT0FBT29CLFVBQVAsQ0FBa0JsQixNQUFsQixFQUF5QkssU0FBekIsRUFBb0NILE1BQXBDLEVBQTRDLElBQTVDLENBQVAsQ0FBMEQ7QUFDcEUsZUFBSyxHQUFMO0FBQVVVLG1CQUFPZCxPQUFPb0IsVUFBUCxDQUFrQmxCLE1BQWxCLEVBQXlCSyxTQUF6QixFQUFvQ0gsTUFBcEMsRUFBNEMsS0FBNUMsQ0FBUCxDQUEyRDtBQUNyRSxlQUFLLEdBQUw7QUFBVVUsbUJBQU9kLE9BQU9vQixVQUFQLENBQWtCbEIsTUFBbEIsRUFBeUJLLFNBQXpCLEVBQW9DSCxNQUFwQyxFQUE0QyxJQUE1QyxDQUFQLENBQTBEO0FBQ3BFLGVBQUssR0FBTDtBQUFVVSxtQkFBT2QsT0FBT29CLFVBQVAsQ0FBa0JsQixNQUFsQixFQUF5QkssU0FBekIsRUFBb0NILE1BQXBDLEVBQTRDLEtBQTVDLENBQVAsQ0FBMkQ7QUFDckUsZUFBSyxHQUFMO0FBQVVVLG1CQUFPZCxPQUFPcUIsZUFBUCxDQUF1Qm5CLE1BQXZCLEVBQStCSyxTQUEvQixFQUEwQ0gsTUFBMUMsRUFBa0QsSUFBbEQsQ0FBUCxDQUFnRTtBQUMxRSxlQUFLLEdBQUw7QUFBVVUsbUJBQU9kLE9BQU9xQixlQUFQLENBQXVCbkIsTUFBdkIsRUFBK0JLLFNBQS9CLEVBQTBDSCxNQUExQyxFQUFrRCxLQUFsRCxDQUFQLENBQWlFO0FBQzNFLGVBQUssR0FBTDtBQUFVVSxtQkFBT2QsT0FBT3NCLFlBQVAsQ0FBb0JwQixNQUFwQixFQUEyQkssU0FBM0IsRUFBcUNILE1BQXJDLENBQVAsQ0FBcUQ7QUFDL0QsZUFBSyxHQUFMO0FBQVVVLG1CQUFPZCxPQUFPdUIsYUFBUCxDQUFxQnJCLE1BQXJCLEVBQTRCSyxTQUE1QixFQUF1Q0gsTUFBdkMsQ0FBUCxDQUF1RDtBQUNqRSxlQUFLLEdBQUw7QUFDQSxlQUFLLEdBQUw7QUFBVVUsbUJBQU9kLE9BQU93QixhQUFQLENBQXFCdEIsTUFBckIsRUFBNkJFLE1BQTdCLENBQVAsQ0FBNkM7QUFDdkQsZUFBSyxHQUFMO0FBQVVVLG1CQUFPZCxPQUFPb0IsVUFBUCxDQUFrQmxCLE1BQWxCLEVBQXlCSyxTQUF6QixFQUFvQ0gsTUFBcEMsRUFBNEMsS0FBNUMsQ0FBUCxDQUEyRDtBQUNyRSxlQUFLLEdBQUw7QUFBVVUsbUJBQU8sQ0FBQ0gsU0FBRCxFQUFZLENBQVosQ0FBUCxDQUF1QjtBQUNqQztBQUFVWCxtQkFBT1UsS0FBUCxzQkFBZ0NMLE9BQWhDLGFBQThDSixLQUFLSSxPQUFMLENBQTlDLFNBQWlFRixTQUFTUSxTQUFULENBQW9CO0FBbkJqRztBQXFCQSxZQUFHRyxLQUFLLENBQUwsTUFBWUgsU0FBZixFQUNFUixPQUFPc0IsSUFBUCxDQUFZWCxLQUFLLENBQUwsQ0FBWjtBQUNGVixrQkFBVVUsS0FBSyxDQUFMLENBQVY7QUFDQVQsbUJBQVcsQ0FBWDtBQUNEOztBQUVELGFBQU9GLE1BQVA7QUFDRDs7Ozs7QUFXRDtrQ0FDcUJELE0sRUFBUVIsSyxFQUFTO0FBQ3BDLFVBQUlnQyxZQUFZLEVBQWhCO0FBQUEsVUFBb0JuQyxJQUFJRyxLQUF4QjtBQUNBLGFBQU0sSUFBTixFQUFZO0FBQ1YsWUFBR1EsT0FBT2MsUUFBUCxDQUFnQnpCLENBQWhCLE1BQXVCLENBQTFCLEVBQTZCO0FBQzNCO0FBQ0Q7QUFDRG1DLHFCQUFhOUMsT0FBT21DLFlBQVAsQ0FBb0JiLE9BQU9jLFFBQVAsQ0FBZ0J6QixDQUFoQixDQUFwQixDQUFiO0FBQ0EsVUFBRUEsQ0FBRjtBQUNEO0FBQ0QsYUFBT21DLFNBQVA7QUFDRDs7Ozs7QUFFRDtrQ0FDcUJ4QixNLEVBQVFLLFMsRUFBV2IsSyxFQUFRO0FBQzlDLGFBQU8sQ0FBRVEsT0FBT3lCLFVBQVAsQ0FBa0JqQyxLQUFsQixFQUF5QmEsY0FBWVAsT0FBT2EsWUFBNUMsQ0FBRixFQUE2RCxDQUE3RCxDQUFQO0FBQ0Q7Ozs7O0FBRUQ7aUNBQ29CWCxNLEVBQVFLLFMsRUFBV2IsSyxFQUFRO0FBQzdDLGFBQU8sQ0FBRVEsT0FBTzBCLFVBQVAsQ0FBa0JsQyxLQUFsQixFQUF5QmEsY0FBWVAsT0FBT2EsWUFBNUMsQ0FBRixFQUE4RCxDQUE5RCxDQUFQO0FBQ0Q7Ozs7O0FBRUQ7b0NBQ3VCWCxNLEVBQVFLLFMsRUFBV2IsSyxFQUFPbUMsTSxFQUFTO0FBQ3hEO0FBQ0EsVUFBSTFCLFNBQVVJLGNBQVlQLE9BQU9hLFlBQXBCLEdBQ1RYLE9BQU9wQixTQUFQLENBQWlCLElBQUVZLEtBQW5CLElBQTRCTSxPQUFPOEIsR0FBckMsR0FBK0M1QixPQUFPcEIsU0FBUCxDQUFpQixJQUFFWSxLQUFuQixJQUE0Qk0sT0FBTytCLEdBQWxGLEdBQTRGN0IsT0FBT3BCLFNBQVAsQ0FBaUIsSUFBRVksS0FBbkIsSUFBNEJNLE9BQU9nQyxHQUEvSCxHQUF5STlCLE9BQU9wQixTQUFQLENBQWlCLElBQUVZLEtBQW5CLElBQTRCTSxPQUFPaUMsR0FBNUssR0FBc0wvQixPQUFPcEIsU0FBUCxDQUFpQixJQUFFWSxLQUFuQixJQUE0Qk0sT0FBT2tDLEdBQXpOLEdBQW1PaEMsT0FBT3BCLFNBQVAsQ0FBaUIsSUFBRVksS0FBbkIsSUFBNEJNLE9BQU9tQyxHQUF0USxHQUFnUmpDLE9BQU9wQixTQUFQLENBQWlCLElBQUVZLEtBQW5CLElBQTRCTSxPQUFPb0MsRUFBblQsR0FBNFRsQyxPQUFPcEIsU0FBUCxDQUFpQixJQUFFWSxLQUFuQixDQURqVCxHQUVUUSxPQUFPcEIsU0FBUCxDQUFpQixJQUFFWSxLQUFuQixJQUE0Qk0sT0FBTzhCLEdBQXJDLEdBQStDNUIsT0FBT3BCLFNBQVAsQ0FBaUIsSUFBRVksS0FBbkIsSUFBNEJNLE9BQU8rQixHQUFsRixHQUE0RjdCLE9BQU9wQixTQUFQLENBQWlCLElBQUVZLEtBQW5CLElBQTRCTSxPQUFPZ0MsR0FBL0gsR0FBeUk5QixPQUFPcEIsU0FBUCxDQUFpQixJQUFFWSxLQUFuQixJQUE0Qk0sT0FBT2lDLEdBQTVLLEdBQXNML0IsT0FBT3BCLFNBQVAsQ0FBaUIsSUFBRVksS0FBbkIsSUFBNEJNLE9BQU9rQyxHQUF6TixHQUFtT2hDLE9BQU9wQixTQUFQLENBQWlCLElBQUVZLEtBQW5CLElBQTRCTSxPQUFPbUMsR0FBdFEsR0FBZ1JqQyxPQUFPcEIsU0FBUCxDQUFpQixJQUFFWSxLQUFuQixJQUE0Qk0sT0FBT29DLEVBQW5ULEdBQTRUbEMsT0FBT3BCLFNBQVAsQ0FBaUIsSUFBRVksS0FBbkIsQ0FGOVQ7QUFHQVMsZUFBVTBCLFNBQVMxQixTQUFTLGtCQUFuQixHQUEwQyxFQUFHLHFCQUFxQkEsTUFBckIsR0FBOEIsQ0FBakMsQ0FBMUMsR0FBaUZBLE1BQTFGO0FBQ0EsYUFBTyxDQUFDQSxNQUFELEVBQVMsQ0FBVCxDQUFQO0FBQ0Q7OzsrQkFFaUJELE0sRUFBUUssUyxFQUFXYixLLEVBQU9tQyxNLEVBQVM7QUFDbkQsYUFBTyxDQUFFQSxNQUFELEdBQVMzQixPQUFPbUMsUUFBUCxDQUFnQjNDLEtBQWhCLEVBQXVCYSxjQUFZUCxPQUFPYSxZQUExQyxDQUFULEdBQWlFWCxPQUFPb0MsU0FBUCxDQUFpQjVDLEtBQWpCLEVBQXdCYSxjQUFZUCxPQUFPYSxZQUEzQyxDQUFsRSxFQUE0SCxDQUE1SCxDQUFQO0FBQ0Q7Ozs7O0FBRUQ7aUNBQ29CWCxNLEVBQVFLLFMsRUFBV2IsSyxFQUFPbUMsTSxFQUFRO0FBQ3BELGFBQU8sQ0FBRUEsTUFBRCxHQUFTM0IsT0FBT3FDLFFBQVAsQ0FBZ0I3QyxLQUFoQixFQUF1QmEsY0FBWVAsT0FBT2EsWUFBMUMsQ0FBVCxHQUFpRVgsT0FBT3NDLFNBQVAsQ0FBaUI5QyxLQUFqQixFQUF3QmEsY0FBWVAsT0FBT2EsWUFBM0MsQ0FBbEUsRUFBNEgsQ0FBNUgsQ0FBUDtBQUNEOzs7OztBQUVEO2dDQUNtQlgsTSxFQUFRdUMsQyxFQUFHL0MsSyxFQUFPbUMsTSxFQUFTO0FBQzVDLGFBQU8sQ0FBR0EsTUFBRCxHQUFTM0IsT0FBT3dDLE9BQVAsQ0FBZWhELEtBQWYsQ0FBVCxHQUErQlEsT0FBT2MsUUFBUCxDQUFnQnRCLEtBQWhCLENBQWpDLEVBQTBELENBQTFELENBQVA7QUFDRDs7Ozs7QUFFRDtnQ0FDbUJRLE0sRUFBUXVDLEMsRUFBRy9DLEssRUFBTztBQUNuQyxhQUFPLENBQUVRLE9BQU9jLFFBQVAsQ0FBZ0J0QixLQUFoQixJQUF5QixDQUEzQixFQUE4QixDQUE5QixDQUFQO0FBQ0Q7OzswQkFFWWlELEcsRUFBUTtBQUNuQixVQUFJM0MsT0FBTzRDLFVBQVgsRUFBdUI7QUFDckJDLGdCQUFRbkMsS0FBUixjQUF5QmlDLEdBQXpCO0FBQ0Q7QUFDRjs7OzJCQUVhQSxHLEVBQU87QUFDbkIsVUFBRzNDLE9BQU84QyxVQUFWLEVBQXNCO0FBQ3BCRCxnQkFBUUUsR0FBUixjQUF1QkosR0FBdkI7QUFDRDtBQUNGOzs7Ozs7QUE1SmtCM0MsTSxDQU1aZ0QsTyxHQUFVLEc7QUFORWhELE0sQ0FPWjRDLFUsR0FBYSxJO0FBUEQ1QyxNLENBUVo4QyxVLEdBQWEsSTtBQVJEOUMsTSxDQVVaOEIsRyxHQUFPbUIsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBVyxFQUFYLEM7QUFWS2xELE0sQ0FXWitCLEcsR0FBT2tCLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVcsRUFBWCxDO0FBWEtsRCxNLENBWVpnQyxHLEdBQU9pQixLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFXLEVBQVgsQztBQVpLbEQsTSxDQWFaaUMsRyxHQUFPZ0IsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBVyxFQUFYLEM7QUFiS2xELE0sQ0FjWmtDLEcsR0FBT2UsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBVyxFQUFYLEM7QUFkS2xELE0sQ0FlWm1DLEcsR0FBT2MsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBVyxFQUFYLEM7QUFmS2xELE0sQ0FnQlpvQyxFLEdBQU9hLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVcsQ0FBWCxDO0FBaEJLbEQsTSxDQWlCWm1ELEUsR0FBT0YsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBVyxDQUFYLEM7QUFqQktsRCxNLENBbUJab0QsQyxHQUFJLEU7QUFuQlFwRCxNLENBcUJaYSxZLEdBQWUsQztBQXJCSGIsTSxDQXNCWlksUyxHQUFZLEM7O0FBdEJBWixNLENBcUZacUQsa0IsR0FBcUIsVUFBU0MsR0FBVCxFQUFnQjtBQUMxQyxNQUFNcEUsTUFBTSxJQUFJQyxXQUFKLENBQWdCbUUsSUFBSWxFLE1BQXBCLENBQVo7QUFDQSxNQUFNQyxVQUFVLElBQUlDLFVBQUosQ0FBZUosR0FBZixDQUFoQjtBQUNBLE9BQUssSUFBSUssSUFBRSxDQUFOLEVBQVNDLFNBQU84RCxJQUFJbEUsTUFBekIsRUFBaUNHLElBQUVDLE1BQW5DLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUM5Q0YsWUFBUUUsQ0FBUixJQUFhK0QsSUFBSXRFLFVBQUosQ0FBZU8sQ0FBZixJQUFvQixJQUFqQztBQUNEO0FBQ0QsU0FBT0wsR0FBUDtBQUNELEM7O2tCQTVGa0JjLE07QUE2SnBCOztBQUVELEtBQUssSUFBSVQsSUFBRSxDQUFYLEVBQWFBLElBQUUsRUFBZixFQUFrQkEsR0FBbEIsRUFBeUI7QUFDdkJTLFNBQU9vRCxDQUFQLENBQVM3RCxDQUFULElBQWMwRCxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFXM0QsQ0FBWCxDQUFkO0FBQ0QiLCJmaWxlIjoic3RydWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IEx1Y2FzIFRlc2tlIG9uIDMwLzA0LzE3LlxuICovXG5cbi8vIFNvbWUgYXV4aWxpYXJ5IGZ1bmN0aW9uc1xuXG5TdHJpbmcucHJvdG90eXBlLkdldEJ5dGVBdCA9IGZ1bmN0aW9uKGluZGV4KSAgICB7XG4gIHJldHVybiAodGhpcy5jaGFyQ29kZUF0KGluZGV4KSAmIDB4RkYpO1xufTtcblxuU3RyaW5nLnByb3RvdHlwZS5Bc1VpbnQ4QXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpICB7XG4gIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLmxlbmd0aCk7XG4gIGNvbnN0IGJ1ZlZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuICBmb3IgKGxldCBpPTAsIHN0ckxlbj10aGlzLmxlbmd0aDsgaTxzdHJMZW47IGkrKykge1xuICAgIGJ1ZlZpZXdbaV0gPSB0aGlzLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuICB9XG4gIHJldHVybiBidWY7XG59O1xuXG5pZighQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKSB7XG4gIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LGVuZCkgICB7XG4gICAgY29uc3QgYXJyID0gbmV3IEFycmF5QnVmZmVyKGVuZC1zdGFydCk7XG4gICAgY29uc3QgdWNoYXIgPSBuZXcgVWludDhBcnJheSh0aGlzKTtcbiAgICBjb25zdCB1Y2hhcjIgPSBuZXcgVWludDhBcnJheShhcnIpO1xuICAgIGxldCBjID0gMDtcbiAgICBmb3IobGV0IGk9c3RhcnQ7aTxlbmQ7aSsrKSAge1xuICAgICAgdWNoYXIyW2NdID0gdWNoYXJbaV07XG4gICAgICBjKys7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0cnVjdCB7XG5cbiAgLy9cbiAgLy8gQ29uc3RhbnRzXG4gIC8vXG5cbiAgc3RhdGljIFZFUlNJT04gPSAwLjk7XG4gIHN0YXRpYyBzaG93RXJyb3JzID0gdHJ1ZTtcbiAgc3RhdGljIHNob3dOb3RpY2UgPSB0cnVlO1xuXG4gIHN0YXRpYyBiNTYgID0gTWF0aC5wb3coMiw1Nik7XG4gIHN0YXRpYyBiNDggID0gTWF0aC5wb3coMiw0OCk7XG4gIHN0YXRpYyBiNDAgID0gTWF0aC5wb3coMiw0MCk7XG4gIHN0YXRpYyBiMzIgID0gTWF0aC5wb3coMiwzMik7XG4gIHN0YXRpYyBiMjQgID0gTWF0aC5wb3coMiwyNCk7XG4gIHN0YXRpYyBiMTYgID0gTWF0aC5wb3coMiwxNik7XG4gIHN0YXRpYyBiOCAgID0gTWF0aC5wb3coMiw4KTtcbiAgc3RhdGljIGI0ICAgPSBNYXRoLnBvdygyLDQpO1xuXG4gIHN0YXRpYyBiID0ge307XG5cbiAgc3RhdGljIExpdHRsZUVuZGlhbiA9IDA7XG4gIHN0YXRpYyBCaWdFbmRpYW4gPSAxO1xuXG4gIC8vXG4gIC8vIE1ldGhvZHNcbiAgLy9cblxuICBzdGF0aWMgdW5wYWNrKG1vZGUsIHN0cmluZykge1xuICAgIGxldCByZXR2YWwgPSBbXSxcbiAgICAgIHN0cnBvcyA9IDAsXG4gICAgICBtb2RlcG9zID0gMCxcbiAgICAgIG1vZGVsZW4gPSBtb2RlLmxlbmd0aCxcbiAgICAgIGVuZGlhbmVzcztcblxuICAgIGlmKCEoc3RyaW5nIGluc3RhbmNlb2YgRGF0YVZpZXcpICYmICEoc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSAgICB7XG4gICAgICBTdHJ1Y3Qubm90aWNlKCdGcm9tIFN0cnVjdC5qcyB2ZXJzaW9uIDAuMiwgaXRzIHJlY29tZW5kZWQgdG8gdXNlIERhdGFWaWV3IG9yIEFycmF5QnVmZmVyIGFzIGlucHV0LiBDb252ZXJ0aW5nIFN0cmluZyB0byBEYXRhdmlldycpO1xuICAgICAgc3RyaW5nID0gbmV3IERhdGFWaWV3KHN0cmluZy5Bc1VpbnQ4QXJyYXlCdWZmZXIoKSk7XG4gICAgfWVsc2UgaWYoc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICBzdHJpbmcgPSBuZXcgRGF0YVZpZXcoc3RyaW5nKTtcblxuICAgIGlmKG1vZGVsZW4gPT09IDApICAge1xuICAgICAgU3RydWN0LmVycm9yKFwiSW52YWxpZCBtb2RlXCIpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3dpdGNoKG1vZGVbMF0pICAge1xuICAgICAgY2FzZSBcIj5cIjpcbiAgICAgIGNhc2UgXCIhXCI6ICAgZW5kaWFuZXNzID0gU3RydWN0LkJpZ0VuZGlhbjsgbW9kZXBvcyArPSAxOyBicmVhaztcblxuICAgICAgY2FzZSBcIkBcIjpcbiAgICAgIGNhc2UgXCI9XCI6ICAgU3RydWN0Lm5vdGljZShcIkFzc3VtaW5nIG5hdGl2ZSA9IGxpdHRsZWVuZGlhblwiKTsgbW9kZXBvcyArPSAxOyBlbmRpYW5lc3MgPSBTdHJ1Y3QuTGl0dGxlRW5kaWFuOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6ICAgIGVuZGlhbmVzcyA9IFN0cnVjdC5MaXR0bGVFbmRpYW47XG4gICAgfVxuICAgIGxldCBkYXRhID0gW3VuZGVmaW5lZCwwXTtcbiAgICB3aGlsZShtb2RlcG9zIDwgbW9kZWxlbikge1xuICAgICAgc3dpdGNoKG1vZGVbbW9kZXBvc10pIHtcbiAgICAgICAgY2FzZSBcImNcIjogZGF0YVswXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyaW5nLmdldFVpbnQ4KHN0cnBvcykpOyBkYXRhWzFdID0gMTsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJiXCI6IGRhdGEgPSBTdHJ1Y3QuX3VucGFja0NoYXIoc3RyaW5nLCBlbmRpYW5lc3MsIHN0cnBvcywgdHJ1ZSk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiQlwiOiBkYXRhID0gU3RydWN0Ll91bnBhY2tDaGFyKHN0cmluZywgZW5kaWFuZXNzLCBzdHJwb3MsIGZhbHNlKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI/XCI6IGRhdGEgPSBTdHJ1Y3QuX3VucGFja0Jvb2woc3RyaW5nLCBlbmRpYW5lc3MsIHN0cnBvcyk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiaFwiOiBkYXRhID0gU3RydWN0Ll91bnBhY2tTaG9ydChzdHJpbmcsZW5kaWFuZXNzLCBzdHJwb3MsIHRydWUpOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkhcIjogZGF0YSA9IFN0cnVjdC5fdW5wYWNrU2hvcnQoc3RyaW5nLGVuZGlhbmVzcywgc3RycG9zLCBmYWxzZSk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiaVwiOiBkYXRhID0gU3RydWN0Ll91bnBhY2tJbnQoc3RyaW5nLGVuZGlhbmVzcywgc3RycG9zLCB0cnVlKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJJXCI6IGRhdGEgPSBTdHJ1Y3QuX3VucGFja0ludChzdHJpbmcsZW5kaWFuZXNzLCBzdHJwb3MsIGZhbHNlKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJsXCI6IGRhdGEgPSBTdHJ1Y3QuX3VucGFja0ludChzdHJpbmcsZW5kaWFuZXNzLCBzdHJwb3MsIHRydWUpOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkxcIjogZGF0YSA9IFN0cnVjdC5fdW5wYWNrSW50KHN0cmluZyxlbmRpYW5lc3MsIHN0cnBvcywgZmFsc2UpOyBicmVhaztcbiAgICAgICAgY2FzZSBcInFcIjogZGF0YSA9IFN0cnVjdC5fdW5wYWNrTG9uZ2xvbmcoc3RyaW5nLCBlbmRpYW5lc3MsIHN0cnBvcywgdHJ1ZSk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiUVwiOiBkYXRhID0gU3RydWN0Ll91bnBhY2tMb25nbG9uZyhzdHJpbmcsIGVuZGlhbmVzcywgc3RycG9zLCBmYWxzZSk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZlwiOiBkYXRhID0gU3RydWN0Ll91bnBhY2tGbG9hdChzdHJpbmcsZW5kaWFuZXNzLHN0cnBvcyk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZFwiOiBkYXRhID0gU3RydWN0Ll91bnBhY2tEb3VibGUoc3RyaW5nLGVuZGlhbmVzcywgc3RycG9zKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIGNhc2UgXCJwXCI6IGRhdGEgPSBTdHJ1Y3QuX3VucGFja1N0cmluZyhzdHJpbmcsIHN0cnBvcyk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiUFwiOiBkYXRhID0gU3RydWN0Ll91bnBhY2tJbnQoc3RyaW5nLGVuZGlhbmVzcywgc3RycG9zLCBmYWxzZSk7IGJyZWFrO1xuICAgICAgICBjYXNlIFwieFwiOiBkYXRhID0gW3VuZGVmaW5lZCwgMV07IGJyZWFrO1xuICAgICAgICBkZWZhdWx0IDogU3RydWN0LmVycm9yKGBJbnZhbGlkIGNoYXIgYXQgJHttb2RlcG9zfSA6IFwiJHttb2RlW21vZGVwb3NdfVwiYCk7IHJldHZhbCA9IHVuZGVmaW5lZDsgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZihkYXRhWzBdICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHZhbC5wdXNoKGRhdGFbMF0pO1xuICAgICAgc3RycG9zICs9IGRhdGFbMV07XG4gICAgICBtb2RlcG9zICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldHZhbDtcbiAgfVxuXG4gIHN0YXRpYyBTdHJpbmcyQXJyYXlCdWZmZXIgPSBmdW5jdGlvbihzdHIpICAge1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzdHIubGVuZ3RoKTtcbiAgICBjb25zdCBidWZWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICBmb3IgKGxldCBpPTAsIHN0ckxlbj1zdHIubGVuZ3RoOyBpPHN0ckxlbjsgaSsrKSB7XG4gICAgICBidWZWaWV3W2ldID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xuICB9O1xuXG4gIC8qICBVbnBhY2sgU3RyaW5nICAgKi9cbiAgc3RhdGljIF91bnBhY2tTdHJpbmcoc3RyaW5nLCBzdGFydCkgICB7XG4gICAgbGV0IG91dHN0cmluZyA9IFwiXCIsIGkgPSBzdGFydDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICBpZihzdHJpbmcuZ2V0VWludDgoaSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBvdXRzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShzdHJpbmcuZ2V0VWludDgoaSkpO1xuICAgICAgKytpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0c3RyaW5nO1xuICB9O1xuXG4gIC8qICBVbnBhY2sgRG91YmxlICAgKi9cbiAgc3RhdGljIF91bnBhY2tEb3VibGUoc3RyaW5nLCBlbmRpYW5lc3MsIHN0YXJ0KSAge1xuICAgIHJldHVybiBbIHN0cmluZy5nZXRGbG9hdDY0KHN0YXJ0LCBlbmRpYW5lc3M9PT1TdHJ1Y3QuTGl0dGxlRW5kaWFuKSwgOCBdO1xuICB9O1xuXG4gIC8qICBVbnBhY2sgZmxvYXQgKi9cbiAgc3RhdGljIF91bnBhY2tGbG9hdChzdHJpbmcsIGVuZGlhbmVzcywgc3RhcnQpICB7XG4gICAgcmV0dXJuIFsgc3RyaW5nLmdldEZsb2F0MzIoc3RhcnQsIGVuZGlhbmVzcz09PVN0cnVjdC5MaXR0bGVFbmRpYW4pICwgNCBdO1xuICB9O1xuXG4gIC8qICBVbnBhY2sgU2lnbmVkL1Vuc2lnbmVkIExvbmcgTG9uZyAgICAqL1xuICBzdGF0aWMgX3VucGFja0xvbmdsb25nKHN0cmluZywgZW5kaWFuZXNzLCBzdGFydCwgc2lnbmVkKSAge1xuICAgIC8vVE9ETzogUG9ydCB0byBEYXRhVmlld1xuICAgIGxldCByZXR2YWwgPSAoZW5kaWFuZXNzPT09U3RydWN0LkxpdHRsZUVuZGlhbikgP1xuICAgICAgKCBzdHJpbmcuR2V0Qnl0ZUF0KDcrc3RhcnQpICogU3RydWN0LmI1NiApICsgKCBzdHJpbmcuR2V0Qnl0ZUF0KDYrc3RhcnQpICogU3RydWN0LmI0OCApICsgKCBzdHJpbmcuR2V0Qnl0ZUF0KDUrc3RhcnQpICogU3RydWN0LmI0MCApICsgKCBzdHJpbmcuR2V0Qnl0ZUF0KDQrc3RhcnQpICogU3RydWN0LmIzMiApICsgKCBzdHJpbmcuR2V0Qnl0ZUF0KDMrc3RhcnQpICogU3RydWN0LmIyNCApICsgKCBzdHJpbmcuR2V0Qnl0ZUF0KDIrc3RhcnQpICogU3RydWN0LmIxNiApICsgKCBzdHJpbmcuR2V0Qnl0ZUF0KDErc3RhcnQpICogU3RydWN0LmI4ICkgKyAoIHN0cmluZy5HZXRCeXRlQXQoMCtzdGFydCkgKSA6XG4gICAgICAoIHN0cmluZy5HZXRCeXRlQXQoMCtzdGFydCkgKiBTdHJ1Y3QuYjU2ICkgKyAoIHN0cmluZy5HZXRCeXRlQXQoMStzdGFydCkgKiBTdHJ1Y3QuYjQ4ICkgKyAoIHN0cmluZy5HZXRCeXRlQXQoMitzdGFydCkgKiBTdHJ1Y3QuYjQwICkgKyAoIHN0cmluZy5HZXRCeXRlQXQoMytzdGFydCkgKiBTdHJ1Y3QuYjMyICkgKyAoIHN0cmluZy5HZXRCeXRlQXQoNCtzdGFydCkgKiBTdHJ1Y3QuYjI0ICkgKyAoIHN0cmluZy5HZXRCeXRlQXQoNStzdGFydCkgKiBTdHJ1Y3QuYjE2ICkgKyAoIHN0cmluZy5HZXRCeXRlQXQoNitzdGFydCkgKiBTdHJ1Y3QuYjggKSArICggc3RyaW5nLkdldEJ5dGVBdCg3K3N0YXJ0KSk7XG4gICAgcmV0dmFsID0gKHNpZ25lZCAmIHJldHZhbCA+IDB4N0ZGRkZGRkZGRkZGRkZGRiApID8gLSggMHhGRkZGRkZGRkZGRkZGRkZGIC0gcmV0dmFsICsgMSApIDogcmV0dmFsIDtcbiAgICByZXR1cm4gW3JldHZhbCwgOF07XG4gIH07XG5cbiAgc3RhdGljIF91bnBhY2tJbnQoc3RyaW5nLCBlbmRpYW5lc3MsIHN0YXJ0LCBzaWduZWQpICB7XG4gICAgcmV0dXJuIFsoc2lnbmVkKT9zdHJpbmcuZ2V0SW50MzIoc3RhcnQsIGVuZGlhbmVzcz09PVN0cnVjdC5MaXR0bGVFbmRpYW4pOnN0cmluZy5nZXRVaW50MzIoc3RhcnQsIGVuZGlhbmVzcz09PVN0cnVjdC5MaXR0bGVFbmRpYW4pLCA0XTtcbiAgfTtcblxuICAvKiAgVW5wYWNrIHNpZ25lZC91bnNpZ25lZCBzaG9ydCAqL1xuICBzdGF0aWMgX3VucGFja1Nob3J0KHN0cmluZywgZW5kaWFuZXNzLCBzdGFydCwgc2lnbmVkKSB7XG4gICAgcmV0dXJuIFsoc2lnbmVkKT9zdHJpbmcuZ2V0SW50MTYoc3RhcnQsIGVuZGlhbmVzcz09PVN0cnVjdC5MaXR0bGVFbmRpYW4pOnN0cmluZy5nZXRVaW50MTYoc3RhcnQsIGVuZGlhbmVzcz09PVN0cnVjdC5MaXR0bGVFbmRpYW4pLCAyXTtcbiAgfTtcblxuICAvKiAgVW5wYWNrIHNpZ25lZC91bnNpZ25lZCBjaGFyIGFzIGludCAgKi9cbiAgc3RhdGljIF91bnBhY2tDaGFyKHN0cmluZywgXywgc3RhcnQsIHNpZ25lZCkgIHtcbiAgICByZXR1cm4gWyAoc2lnbmVkKT9zdHJpbmcuZ2V0SW50OChzdGFydCk6c3RyaW5nLmdldFVpbnQ4KHN0YXJ0KSAsIDEgXVxuICB9O1xuXG4gIC8qICBVbnBhY2sgYm9vbGVhbiAgKi9cbiAgc3RhdGljIF91bnBhY2tCb29sKHN0cmluZywgXywgc3RhcnQpIHtcbiAgICByZXR1cm4gWyBzdHJpbmcuZ2V0VWludDgoc3RhcnQpID4gMCwgMSBdO1xuICB9O1xuXG4gIHN0YXRpYyBlcnJvcihtc2cpICAgIHtcbiAgICBpZiAoU3RydWN0LnNob3dFcnJvcnMpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFN0cnVjdDogJHttc2d9YCk7XG4gICAgfVxuICB9O1xuXG4gIHN0YXRpYyBub3RpY2UobXNnKSAgIHtcbiAgICBpZihTdHJ1Y3Quc2hvd05vdGljZSkge1xuICAgICAgY29uc29sZS5sb2coYFN0cnVjdDogJHttc2d9YCk7XG4gICAgfVxuICB9O1xufTtcblxuZm9yIChsZXQgaT0wO2k8NjQ7aSsrKSAgIHtcbiAgU3RydWN0LmJbaV0gPSBNYXRoLnBvdygyLGkpO1xufSJdfQ==